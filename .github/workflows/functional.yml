name: Functional Test

on:
  push:

env:
  IMAGE_NAME: localhost:5000/orion-ld-test:latest
  IGNORE_TEST: '0706_direct_https_notifications/direct_https_notifications.test 0706_direct_https_notifications/direct_https_notifications_no_accept_selfsigned.test 2015_notification_templates/notification_templates_cache_refresh.test 0000_ipv6_support/ipv4_ipv6_both.test'
  IMAGE_NAME_BASE: fiware/orion-ld-base

jobs:
  get-version:
    on:
      push:
        branches:
          - 'release/**'
          -
    runs-on: ubuntu-18.04
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - uses: jungwinter/split@v1
        id: split
        with:
          msg: ${{ steps.extract_branch.outputs.branch }}
          seperator: /

      - name: Set up QEMU
          uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ env.IMAGE_NAME_BASE }}:${{ steps.split.outputs._1 }}
          file: docker/Dockerfile-base


  functional-part1:
    runs-on: ubuntu-18.04

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
      mosquitto:
        image: eclipse-mosquitto:1.6
        ports:
          - 1883:1883
          - 9001:9001
      postgres:
        image: postgis/postgis:12-3.1-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
      mongodb:
        image: mongo:4.0
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - uses: jungwinter/split@v1
        id: split
        with:
          msg: ${{ steps.extract_branch.outputs.branch }}
          seperator: /

      - name: Decide tag
        id: tag
        run: |
          ::set-output name=tag::if [ ${{ steps.split.outputs._0 }} -eq "release" ] ; then${{ steps.split.outputs._1 }}; else "latest" ; fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Build and push to local registry
        uses: docker/build-push-action@v2
        with:
          push: true
          file: docker/Dockerfile-test
          tags: ${{ env.IMAGE_NAME }}
          build-args: |
            BASE_IMAGE_VERSION=${{ steps.tag.tag }}

      - name: Run functional test
        run: |
          docker run --rm --network host -e CB_FT_VERBOSE=true -e CB_SKIP_FUNC_TESTS='${{ env.IGNORE_TEST}}' -e ORIONLD_CACHED_CONTEXT_DIRECTORY=/opt/orion/ldcontexts -e CB_FT_VERBOSE=ON ${{ env.IMAGE_NAME }} -s functional_0_431 -dqt

  functional-part2:
    runs-on: ubuntu-18.04

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
      mosquitto:
        image: eclipse-mosquitto:1.6
        ports:
          - 1883:1883
          - 9001:9001
      postgres:
        image: postgis/postgis:12-3.1-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
      mongodb:
        image: mongo:4.0
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - uses: jungwinter/split@v1
        id: split
        with:
          msg: ${{ steps.extract_branch.outputs.branch }}
          seperator: /

      - name: Decide tag
        id: tag
        run: |
          ::set-output name=tag::if [ ${{ steps.split.outputs._0 }} -eq "release" ] ; then${{ steps.split.outputs._1 }}; else "latest" ; fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Build and push to local registry
        uses: docker/build-push-action@v2
        with:
          push: true
          file: docker/Dockerfile-test
          tags: ${{ env.IMAGE_NAME }}
          build-args: |
            BASE_IMAGE_VERSION=${{ steps.tag.tag }}

      - name: Run functional test
        run: |
          docker run --rm -v $(pwd):/opt/orion --network host -e CB_FT_VERBOSE=true -e CB_SKIP_FUNC_TESTS='${{ env.IGNORE_TEST}}' -e ORIONLD_CACHED_CONTEXT_DIRECTORY=/opt/orion/ldcontexts -e CB_FT_VERBOSE=ON ${{ env.IMAGE_NAME }} -s functional_432_746 -dqt

  functional-part3:
    runs-on: ubuntu-18.04

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
      mosquitto:
        image: eclipse-mosquitto:1.6
        ports:
          - 1883:1883
          - 9001:9001
      postgres:
        image: postgis/postgis:12-3.1-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
      mongodb:
        image: mongo:4.0
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - uses: jungwinter/split@v1
        id: split
        with:
          msg: ${{ steps.extract_branch.outputs.branch }}
          seperator: /

      - name: Decide tag
        id: tag
        run: |
          ::set-output name=tag::if [ ${{ steps.split.outputs._0 }} -eq "release" ] ; then${{ steps.split.outputs._1 }}; else "latest" ; fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Build and push to local registry
        uses: docker/build-push-action@v2
        with:
          push: true
          file: docker/Dockerfile-test
          tags: ${{ env.IMAGE_NAME }}
          build-args: |
            BASE_IMAGE_VERSION=${{ steps.tag.tag }}

      - name: Run functional test
        run: |
          docker run --rm --network host -e CB_FT_VERBOSE=true -e CB_SKIP_FUNC_TESTS='${{ env.IGNORE_TEST}}' -e ORIONLD_CACHED_CONTEXT_DIRECTORY=/opt/orion/ldcontexts -e CB_FT_VERBOSE=ON ${{ env.IMAGE_NAME }} -s functional_747_1105 -dqt

  functional-part4:
    runs-on: ubuntu-18.04

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
      mosquitto:
        image: eclipse-mosquitto:1.6
        ports:
          - 1883:1883
          - 9001:9001
      postgres:
        image: postgis/postgis:12-3.1-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
      mongodb:
        image: mongo:4.0
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - uses: jungwinter/split@v1
        id: split
        with:
          msg: ${{ steps.extract_branch.outputs.branch }}
          seperator: /

      - name: Decide tag
        id: tag
        run: |
          ::set-output name=tag::if [ ${{ steps.split.outputs._0 }} -eq "release" ] ; then${{ steps.split.outputs._1 }}; else "latest" ; fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Build and push to local registry
        uses: docker/build-push-action@v2
        with:
          push: true
          file: docker/Dockerfile-test
          tags: ${{ env.IMAGE_NAME }}
          build-args: |
            BASE_IMAGE_VERSION=${{ steps.tag.tag }}

      - name: Run functional test
        run: |
          docker run --rm --network host -e CB_FT_VERBOSE=true -e CB_SKIP_FUNC_TESTS='${{ env.IGNORE_TEST}}' -e ORIONLD_CACHED_CONTEXT_DIRECTORY=/opt/orion/ldcontexts -e CB_FT_VERBOSE=ON ${{ env.IMAGE_NAME }} -s functional_1106_1400 -dqt
