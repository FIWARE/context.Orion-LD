# Copyright 2022 FIWARE Foundation e.V.
#
# This file is part of Orion-LD Context Broker.
#
# Orion-LD Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion-LD Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion-LD Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# orionld at fiware dot org

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
New POST Query basic test

--SHELL-INIT--
export BROKER=orionld
dbInit CB
brokerStart CB 0 IPv4 -experimental

--SHELL--

#
# First level Fields:
# 01. Attempt a POST Query with a payload body that is not an Object
# 02. Attempt a POST Query with a payload body that is an Empty Object
# 03. Attempt a POST Query with a payload body with an unknown field 'xyz'
# 04. Attempt a POST Query with a payload body with a duplicated field 'entities'
# 05. Attempt a POST Query with the non-supported field 'csf'
# 06. Attempt a POST Query with the non-supported field 'temporalQ'
# 07. Attempt a POST Query with ALL GOOD, but type == 'Query' missing
# 08. Attempt a POST Query with ALL GOOD, but type is not a String
# 09. Attempt a POST Query with ALL GOOD, but type == 'qUerY'
# 10. Attempt a POST Query with scopeQ - see 501
#
# "entities" field
# 11. Attempt a POST Query with a field 'entities' without its MANDATORY type
# 12. Attempt a POST Query with a field 'entities' with duplicated type field
# 13. Attempt a POST Query with a field 'entities' with an unknown field 'xyz'
# 14. Attempt a POST Query with a field 'entities' with a type that is not a string
# 15. Attempt a POST Query with a field 'entities' with an 'id' that is not a URI
#
# Finally one that passes
# 99. Correct POST Query with all fields present
#

echo "01. Attempt a POST Query with a payload body that is not an Object"
echo "=================================================================="
payload='[ 1, 3  ]'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "02. Attempt a POST Query with a payload body that is an Empty Object"
echo "===================================================================="
payload='{}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "03. Attempt a POST Query with a payload body with an unknown field 'xyz'"
echo "========================================================================"
payload='{
  "xyz": true
}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "04. Attempt a POST Query with a payload body with a duplicated field 'entities'"
echo "==============================================================================="
payload='{
  "entities": [ { "type": "T1" } ],
  "entities": [ { "type": "T2" } ]
}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "05. Attempt a POST Query with the non-supported field 'csf'"
echo "==========================================================="
payload='{
  "csf": "abc"
}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "06. Attempt a POST Query with the non-supported field 'temporalQ'"
echo "================================================================="
payload='{
  "temporalQ": "abc"
}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "07. Attempt a POST Query with ALL GOOD, but type == 'Query' missing"
echo "==================================================================="
payload='{
  "attrs": [ "A1" ]
}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "08. Attempt a POST Query with ALL GOOD, but type is not a String"
echo "================================================================"
payload='{
  "type": 12,
  "attrs": [ "A1" ]
}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "09. Attempt a POST Query with ALL GOOD, but type == 'qUerY'"
echo "==========================================================="
payload='{
  "type": "qUerY",
  "attrs": [ "A1" ]
}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "10. Attempt a POST Query with scopeQ - see 501"
echo "=============================================="
payload='{
  "type": "qUerY",
  "scopeQ": "not implemented ..."
}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "11. Attempt a POST Query with a field 'entities' without its MANDATORY type"
echo "==========================================================================="
payload='{
  "type": "Query",
  "entities": [
    {
      "id": "urn:ngsi-ld:entities:E1"
    }
  ]
}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "12. Attempt a POST Query with a field 'entities' with duplicated type field"
echo "==========================================================================="
payload='{
  "type": "Query",
  "entities": [
    {
      "type": "T1",
      "type": "T1"
    }
  ]
}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "13. Attempt a POST Query with a field 'entities' with an unknown field 'xyz'"
echo "============================================================================"
payload='{
  "type": "Query",
  "entities": [
    {
      "type": "T1",
      "xyz": true
    }
  ]
}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "14. Attempt a POST Query with a field 'entities' with a type that is not a string"
echo "================================================================================="
payload='{
  "type": "Query",
  "entities": [
    {
      "type": 28
    }
  ]
}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


echo "99. Correct POST Query with all fields present"
echo "=============================================="
payload='{
  "type": "Query",
  "entities": [
    {
      "type": "T1"
    },
    {
      "id": "urn:E1",
      "type": "T2"
    },
    {
      "idPattern": "urn:.*",
      "type": "T3"
    },
    {
      "id": "urn:E1",
      "idPattern": "urn:.*",
      "type": "T3"
    }
  ],
  "attrs": [ "P1", "P2", "R1", "R2" ],
  "q": "P1>10&R1==%22urn:E2%22",
  "geoQ": {
    "geometry": "Point",
    "coordinates": [1,2,3],
    "georel": "near;minDistance==5",
    "geoproperty": "G1"
  },
  "lang": "es",
  "local": true
}'
orionCurl --url /ngsi-ld/v1/entityOperations/query --payload "$payload"
echo
echo


--REGEXPECT--
01. Attempt a POST Query with a payload body that is not an Object
==================================================================
HTTP/1.1 400 Bad Request
Content-Length: 124
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "POST Query Payload body",
    "title": "Not a JSON Object",
    "type": "https://uri.etsi.org/ngsi-ld/errors/BadRequestData"
}


02. Attempt a POST Query with a payload body that is an Empty Object
====================================================================
HTTP/1.1 400 Bad Request
Content-Length: 116
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "Empty Object",
    "title": "Invalid Payload Body",
    "type": "https://uri.etsi.org/ngsi-ld/errors/InvalidRequest"
}


03. Attempt a POST Query with a payload body with an unknown field 'xyz'
========================================================================
HTTP/1.1 400 Bad Request
Content-Length: 100
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "xyz",
    "title": "Unknown field",
    "type": "https://uri.etsi.org/ngsi-ld/errors/BadRequestData"
}


04. Attempt a POST Query with a payload body with a duplicated field 'entities'
===============================================================================
HTTP/1.1 400 Bad Request
Content-Length: 108
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "entities",
    "title": "Duplicated field",
    "type": "https://uri.etsi.org/ngsi-ld/errors/BadRequestData"
}


05. Attempt a POST Query with the non-supported field 'csf'
===========================================================
HTTP/1.1 400 Bad Request
Content-Length: 129
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "csf",
    "title": "Field not supported for this type of Query",
    "type": "https://uri.etsi.org/ngsi-ld/errors/BadRequestData"
}


06. Attempt a POST Query with the non-supported field 'temporalQ'
=================================================================
HTTP/1.1 400 Bad Request
Content-Length: 135
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "temporalQ",
    "title": "Field not supported for this type of Query",
    "type": "https://uri.etsi.org/ngsi-ld/errors/BadRequestData"
}


07. Attempt a POST Query with ALL GOOD, but type == 'Query' missing
===================================================================
HTTP/1.1 400 Bad Request
Content-Length: 111
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "type",
    "title": "Mandatory field missing",
    "type": "https://uri.etsi.org/ngsi-ld/errors/BadRequestData"
}


08. Attempt a POST Query with ALL GOOD, but type is not a String
================================================================
HTTP/1.1 400 Bad Request
Content-Length: 105
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "type",
    "title": "Invalid JSON type",
    "type": "https://uri.etsi.org/ngsi-ld/errors/BadRequestData"
}


09. Attempt a POST Query with ALL GOOD, but type == 'qUerY'
===========================================================
HTTP/1.1 400 Bad Request
Content-Length: 141
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "The type field must have the value 'Query'",
    "title": "Invalid request",
    "type": "https://uri.etsi.org/ngsi-ld/errors/BadRequestData"
}


10. Attempt a POST Query with scopeQ - see 501
==============================================
HTTP/1.1 501 Not Implemented
Content-Length: 139
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "scopeQ",
    "title": "This part of the Query is not implpemented",
    "type": "https://uri.etsi.org/ngsi-ld/errors/OperationNotSupported"
}


11. Attempt a POST Query with a field 'entities' without its MANDATORY type
===========================================================================
HTTP/1.1 400 Bad Request
Content-Length: 120
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "entities:type",
    "title": "Mandatory field missing",
    "type": "https://uri.etsi.org/ngsi-ld/errors/BadRequestData"
}


12. Attempt a POST Query with a field 'entities' with duplicated type field
===========================================================================
HTTP/1.1 400 Bad Request
Content-Length: 113
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "entities:type",
    "title": "Duplicated field",
    "type": "https://uri.etsi.org/ngsi-ld/errors/BadRequestData"
}


13. Attempt a POST Query with a field 'entities' with an unknown field 'xyz'
============================================================================
HTTP/1.1 400 Bad Request
Content-Length: 100
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "xyz",
    "title": "Unknown field",
    "type": "https://uri.etsi.org/ngsi-ld/errors/BadRequestData"
}


14. Attempt a POST Query with a field 'entities' with a type that is not a string
=================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 114
Content-Type: application/json
Date: REGEX(.*)

{
    "detail": "entities:type",
    "title": "Invalid JSON type",
    "type": "https://uri.etsi.org/ngsi-ld/errors/BadRequestData"
}


99. Correct POST Query with all fields present
==============================================
HTTP/1.1 200 OK
Content-Length: 2
Content-Type: application/json
Date: REGEX(.*)

[]


--TEARDOWN--
brokerStop CB
dbDrop CB
