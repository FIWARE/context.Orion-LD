# Copyright 2019 FIWARE Foundation e.V.
#
# This file is part of Orion-LD Context Broker.
#
# Orion-LD Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion-LD Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion-LD Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# orionld at fiware dot org

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Context is an array with mixed types of the members: URI-string and inline object

--SHELL-INIT--
export BROKER=orionld
dbInit CB
brokerStart CB 212-249

--SHELL--

#
# 01. Create an entity urn:entity:E1 with a mixed type context: URI-string	and inline object
# 02. Obtain the context from the Link header
# 03. Get the entity, with its creation context - see that attr_A1/2 are returned as short names
# 04. Get the entity, without context - see that attr_A1/2 are returned as long names
#

echo "01. Create an entity with a complex context (inline) and Accept: application/json - see served context in Link Header"
echo "====================================================================================================================="
payload='{
  "id": "urn:entity:E1",
  "type": "T",
  "attr_A1": {
    "type": "Property",
    "value": "Attribute 1"
  },
  "attr_A2": {
    "type": "Property",
    "value": "Attribute 2"
  },
  "@context": [
    "https://fiware.github.io/NGSI-LD_TestSuite/ldContext/testContext.jsonld",
    {
      "attr_A1": "http://a.b.c/A1",
      "attr_A2": "http://a.b.c/A2",
      "type_T": "http://a.b.c/T"
    }
  ]
}'
orionCurl --url /ngsi-ld/v1/entities -X POST --payload "$payload" -H "Content-Type: application/ld+json" -H "Accept: application/json" --linkHeaderFix
contextId=$(cat /tmp/httpHeaders.out | grep 'Link:' | awk -F/ '{ print $8}' | awk -F\> '{ print $1 }')
echo
echo


echo "02. Obtain the context from the Link header"
echo "==========================================="
orionCurl --url /ngsi-ld/ex/v1/contexts/$contextId
echo
echo


HOST=$(hostname)
echo "03. Get the entity, with its creation context - see that attr_A1/2 are returned as short names"
echo "=============================================================================================="
orionCurl --url "/ngsi-ld/v1/entities/urn:entity:E1?prettyPrint=yes" -H "Link: <http://$HOST:$CB_PORT/ngsi-ld/ex/v1/contexts/"$contextId">;"' rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"' --linkHeaderFix --noPayloadCheck
echo
echo


echo "04. Get the entity, without context - see that attr_A1/2 are returned as long names"
echo "==================================================================================="
orionCurl --url /ngsi-ld/v1/entities/urn:entity:E1?prettyPrint=yes --noPayloadCheck
echo
echo


--REGEXPECT--
01. Create an entity with a complex context (inline) and Accept: application/json - see served context in Link Header
=====================================================================================================================
HTTP/1.1 201 Created
Content-Length: 0
Link: REGEX(<http://IP:PORT/ngsi-ld/ex/v1/contexts/.*)
Location: /ngsi-ld/v1/entities/urn:entity:E1
Date: REGEX(.*)



02. Obtain the context from the Link header
===========================================
HTTP/1.1 200 OK
Content-Length: 172
Content-Type: application/json
Date: REGEX(.*)

{
    "@context": [
        "https://fiware.github.io/NGSI-LD_TestSuite/ldContext/testContext.jsonld",
        {
            "attr_A1": "http://a.b.c/A1",
            "attr_A2": "http://a.b.c/A2",
            "type_T": "http://a.b.c/T"
        }
    ]
}


03. Get the entity, with its creation context - see that attr_A1/2 are returned as short names
==============================================================================================
HTTP/1.1 200 OK
Content-Length: 185
Content-Type: application/json
Link: REGEX(<http://IP:PORT/ngsi-ld/ex/v1/contexts/.*)
Date: REGEX(.*)

{
  "id": "urn:entity:E1",
  "type": "T",
  "attr_A1": {
    "type": "Property",
    "value": "Attribute 1"
  },
  "attr_A2": {
    "type": "Property",
    "value": "Attribute 2"
  }
}



04. Get the entity, without context - see that attr_A1/2 are returned as long names
===================================================================================
HTTP/1.1 200 OK
Content-Length: 220
Content-Type: application/json
Link: <https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld>; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"
Date: REGEX(.*)

{
  "id": "urn:entity:E1",
  "type": "http://example.org/T",
  "http://a.b.c/A1": {
    "type": "Property",
    "value": "Attribute 1"
  },
  "http://a.b.c/A2": {
    "type": "Property",
    "value": "Attribute 2"
  }
}



--TEARDOWN--
brokerStop CB
dbDrop CB
