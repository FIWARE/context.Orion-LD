# Copyright 2023 FIWARE Foundation e.V.
#
# This file is part of Orion-LD Context Broker.
#
# Orion-LD Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion-LD Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion-LD Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# orionld at fiware dot org

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Use of the builtin core context

--SHELL-INIT--
dbInit orionld    # Remove the entire database where the @context cache lives
dbInit CB
orionldStart CB

--SHELL--

#
# - The database "orionld" was removed before starting the broker, so, no contexts at startup
# - Upon startup, Orion-LD gets the Core Context from the core context builtin string
#   and pushes that core context to the database
#
# That's if the broker is started without network.
# If started WITH network, the exact same thing will happen, except for the Core Context part.
# The core context will be downloaded instead of taking it from the builtin string
#
# This functest needs to be run twice:
#   1. With the network up and running
#   2. Without network
#
# 01. GET /ngsi-ld/v1/jsonldContexts - see the builtin core context
# 02. Create an entity, without using a context
# 03. GET the entity, also without context
# 04. See urn:E1 in the database, make sure the expansions of 'P1' and 'data' are done using the builtin core context
#


echo "01. GET /ngsi-ld/v1/jsonldContexts - see the builtin core context"
echo "================================================================="
orionCurl --url /ngsi-ld/v1/jsonldContexts
echo
echo


echo "02. Create an entity, without using a context"
echo "============================================="
payload='{
  "id": "urn:E1",
  "type": "T",
  "P1": 1,
  "data": "data"
}'
orionCurl --url /ngsi-ld/v1/entities --payload "$payload"
echo
echo


echo "03. GET the entity, also without context"
echo "========================================"
orionCurl --url /ngsi-ld/v1/entities/urn:E1
echo
echo


echo "04. See urn:E1 in the database, make sure the expansions of 'P1' and 'data' are done using the builtin core context"
echo "==================================================================================================================="
mongoCmd2 ftest "db.entities.findOne()"
echo
echo


--REGEXPECT--
01. GET /ngsi-ld/v1/jsonldContexts - see the builtin core context
=================================================================
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Date: REGEX(.*)

[
    "https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld"
]


02. Create an entity, without using a context
=============================================
HTTP/1.1 201 Created
Content-Length: 0
Date: REGEX(.*)
Location: /ngsi-ld/v1/entities/urn:E1



03. GET the entity, also without context
========================================
HTTP/1.1 200 OK
Content-Length: 103
Content-Type: application/json
Date: REGEX(.*)
Link: <https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld>; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"

{
    "P1": {
        "type": "Property",
        "value": 1
    },
    "data": {
        "type": "Property",
        "value": "data"
    },
    "id": "urn:E1",
    "type": "T"
}


04. See urn:E1 in the database, make sure the expansions of 'P1' and 'data' are done using the builtin core context
===================================================================================================================
MongoDB shell version REGEX(.*)
connecting to: REGEX(.*)
MongoDB server version: REGEX(.*)
{
	"_id" : {
		"id" : "urn:E1",
		"type" : "https://uri.etsi.org/ngsi-ld/default-context/T",
		"servicePath" : "/"
	},
	"attrNames" : [
		"https://uri.etsi.org/ngsi-ld/default-context/P1",
		"https://uri.etsi.org/ngsi-ld/data"
	],
	"attrs" : {
		"https://uri=etsi=org/ngsi-ld/default-context/P1" : {
			"type" : "Property",
			"creDate" : REGEX(.*),
			"modDate" : REGEX(.*),
			"value" : 1,
			"mdNames" : [ ]
		},
		"https://uri=etsi=org/ngsi-ld/data" : {
			"type" : "Property",
			"creDate" : REGEX(.*),
			"modDate" : REGEX(.*),
			"value" : "data",
			"mdNames" : [ ]
		}
	},
	"creDate" : REGEX(.*),
	"modDate" : REGEX(.*),
	"lastCorrelator" : ""
}
bye


--TEARDOWN--
brokerStop CB
dbDrop CB
