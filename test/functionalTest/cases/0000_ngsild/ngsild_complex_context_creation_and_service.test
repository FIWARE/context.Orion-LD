# Copyright 2019 FIWARE Foundation e.V.
#
# This file is part of Orion-LD Context Broker.
#
# Orion-LD Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion-LD Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion-LD Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# orionld at fiware dot org

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Creation of a complex context in the context server, then obtaining it 

--SHELL-INIT--
export BROKER=orionld
dbInit CB
brokerStart CB 212-249

--SHELL--

#
# 01. Create an entity with a complex context (inline) and Accept: application/json - see served context in Link Header
# 02. Obtain the context from the Link header
#

#
# For some reason REGEX inside the Link header to 'null out' $HOST:$PORT doesn't work.
# So, instead, as inside this script we know the hostname and the port, we use 'sed' to substitute the hostname with the static string "HOST"
# and the port with the static string "PORT".
#
# If you look down in the REGEXPECT part of "01. Create an entity with a complex context ...", you see the Link header like this:
#   Link: <http://IP:PORT/ld/contexts/urn:volatile:1>; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"
# which is the modified Link line after sed substitution of hostname and port
#
hostName=$(hostname)
echo "01. Create an entity with a complex context (inline) and Accept: application/json - see served context in Link Header"
echo "====================================================================================================================="
payload='{
  "id": "http://a.b.c/entity/E1",
  "type": "type_T",
  "attr_A1": {
    "type": "Property",
    "value": "Attribute 1"
  },
  "attr_A2": {
    "type": "Property",
    "value": "Attribute 2"
  },
  "@context": {
    "attr_A1": "http://a.b.c/A1",
    "attr_A2": "http://a.b.c/A2",
    "type_T": "http://a.b.c/T"
  }
}'
orionCurl --url /ngsi-ld/v1/entities -X POST --payload "$payload" -H "Content-Type: application/ld+json" -H "Accept: application/json" --linkHeaderFix
contextId=$(cat /tmp/httpHeaders.out | grep 'Link:' | awk -F/ '{ print $6}' | awk -F\> '{ print $1 }')
echo
echo


echo "02. Obtain the context from the Link header"
echo "==========================================="
orionCurl --url /ngsi-ld/contexts/$contextId
echo
echo


--REGEXPECT--
01. Create an entity with a complex context (inline) and Accept: application/json - see served context in Link Header
=====================================================================================================================
HTTP/1.1 201 Created
Content-Length: 0
Link: REGEX(<http://IP:PORT/ngsi-ld/contexts/.*)
Location: /ngsi-ld/v1/entities/http://a.b.c/entity/E1
Date: REGEX(.*)



02. Obtain the context from the Link header
===========================================
HTTP/1.1 200 OK
Content-Length: 96
Content-Type: application/json
Date: REGEX(.*)

{
    "@context": {
        "attr_A1": "http://a.b.c/A1",
        "attr_A2": "http://a.b.c/A2",
        "type_T": "http://a.b.c/T"
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
