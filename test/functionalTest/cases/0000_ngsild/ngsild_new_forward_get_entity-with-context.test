# Copyright 2022 FIWARE Foundation e.V.
#
# This file is part of Orion-LD Context Broker.
#
# Orion-LD Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion-LD Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion-LD Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# orionld at fiware dot org

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Retrieve a distributed entity with @context combinations

--SHELL-INIT--
export BROKER=orionld
dbInit CB
dbInit CP1
dbInit CP2
brokerStart CB  0 IPv4 -experimental -forwarding
brokerStart CP1 0 IPv4 -experimental
brokerStart CP2 0 IPv4 -experimental

--SHELL--
#
# Different ways the @context can be chosen for a forwarded request:
#   1. Content-Type set in contextSourceInfo (that only defines WHERE the @context is - body or Link header)
#   2. jsonldContext set in contextSourceInfo
# That's all ...
#
# 01. Create E1:P1 on CP1, using @context XXX
# 02. Create E1:R1 on CP2, using @context XXX
# 03. Create E1:P2 on CB, using @context XXX
# 04. Register E1:P1 for CP1 on CB, with No Content-Type in contextSourceInfo => same Content-Type as original request
# 05. Register E1:R1 for CP2 on CB, with Accept == application/ld+json in contextSourceInfo, and jsonldContext == XXX
# 06. GET E1 on CB, with Accept == application/json, and Link header == XXX
# 07. GET E1 on CB, with Accept == application/json, and no Link header - see longnames (except R1)
# 08. GET E1 on CB, with Accept == application/ld+json
#
# [ @context XXX == https://fiware.github.io/NGSI-LD_TestSuite/ldContext/testContext.jsonld ]
#

echo "01. Create E1:P1 on CP1, using @context XXX"
echo "==========================================="
payload='{
  "id": "urn:E1",
  "type": "T",
  "P1": "P1 in CP1"
}'
orionCurl --url /ngsi-ld/v1/entities --payload "$payload" --port $CP1_PORT -Link https://fiware.github.io/NGSI-LD_TestSuite/ldContext/testContext.jsonld
echo
echo


echo "02. Create E1:R1 on CP2, using @context XXX"
echo "==========================================="
payload='{
  "id": "urn:E1",
  "type": "T",
  "R1": { "object": "R1:in:CP2" }
}'
orionCurl --url /ngsi-ld/v1/entities --payload "$payload" --port $CP2_PORT -Link https://fiware.github.io/NGSI-LD_TestSuite/ldContext/testContext.jsonld
echo
echo


echo "03. Create E1:P2 on CB, using @context XXX"
echo "=========================================="
payload='{
  "id": "urn:E1",
  "type": "T",
  "P2": "P2 in CB"
}'
orionCurl --url /ngsi-ld/v1/entities --payload "$payload" -Link https://fiware.github.io/NGSI-LD_TestSuite/ldContext/testContext.jsonld
echo
echo


echo "04. Register E1:P1 for CP1 on CB, with No Content-Type in contextSourceInfo => same Content-Type as original request"
echo "===================================================================================================================="
payload='{
  "id": "urn:R1",
  "type": "ContextSourceRegistration",
  "information": [
    {
      "entities": [
        {
          "id": "urn:E1",
          "type": "T"
        }
      ],
      "propertyNames": [ "P1" ]
    }
  ],
  "endpoint": "http://localhost:'$CP1_PORT'",
  "operations": [ "retrieveEntity" ],
  "mode": "inclusive"
}'
orionCurl --url /ngsi-ld/v1/csourceRegistrations --payload "$payload" -Link https://fiware.github.io/NGSI-LD_TestSuite/ldContext/testContext.jsonld
echo
echo


echo "05. Register E1:R1 for CP2 on CB, with Accept == application/ld+json in contextSourceInfo, and jsonldContext == XXX"
echo "==================================================================================================================="
payload='{
  "id": "urn:R2",
  "type": "ContextSourceRegistration",
  "information": [
    {
      "entities": [
        {
          "id": "urn:E1",
          "type": "T"
        }
      ],
      "relationshipNames": [ "R1" ]
    }
  ],
  "endpoint": "http://localhost:'$CP2_PORT'",
  "operations": [ "retrieveEntity" ],
  "mode": "inclusive",
  "contextSourceInfo": [
    {
      "key": "Accept",
      "value": "application/ld+json"
    },
    {
      "key": "jsonldContext",
      "value": "https://fiware.github.io/NGSI-LD_TestSuite/ldContext/testContext.jsonld"
    }
  ]
}'
orionCurl --url /ngsi-ld/v1/csourceRegistrations --payload "$payload" -Link https://fiware.github.io/NGSI-LD_TestSuite/ldContext/testContext.jsonld
echo
echo


echo "06. GET E1 on CB, with Accept == application/json, and Link header == XXX"
echo "========================================================================="
orionCurl --url /ngsi-ld/v1/entities/urn:E1 --out application/json -Link https://fiware.github.io/NGSI-LD_TestSuite/ldContext/testContext.jsonld
echo
echo


echo "07. GET E1 on CB, with Accept == application/json, and no Link header - see longnames (except R1)"
echo "================================================================================================="
orionCurl --url /ngsi-ld/v1/entities/urn:E1 --out application/json
echo
echo


echo "08. GET E1 on CB, with Accept == application/ld+json"
echo "===================================================="
orionCurl --url /ngsi-ld/v1/entities/urn:E1 --out application/ld+json
echo
echo


--REGEXPECT--
01. Create E1:P1 on CP1, using @context XXX
===========================================
HTTP/1.1 201 Created
Content-Length: 0
Date: REGEX(.*)
Location: /ngsi-ld/v1/entities/urn:E1



02. Create E1:R1 on CP2, using @context XXX
===========================================
HTTP/1.1 201 Created
Content-Length: 0
Date: REGEX(.*)
Location: /ngsi-ld/v1/entities/urn:E1



03. Create E1:P2 on CB, using @context XXX
==========================================
HTTP/1.1 201 Created
Content-Length: 0
Date: REGEX(.*)
Location: /ngsi-ld/v1/entities/urn:E1



04. Register E1:P1 for CP1 on CB, with No Content-Type in contextSourceInfo => same Content-Type as original request
====================================================================================================================
HTTP/1.1 201 Created
Content-Length: 0
Date: REGEX(.*)
Location: /ngsi-ld/v1/csourceRegistrations/urn:R1



05. Register E1:R1 for CP2 on CB, with Accept == application/ld+json in contextSourceInfo, and jsonldContext == XXX
===================================================================================================================
HTTP/1.1 201 Created
Content-Length: 0
Date: REGEX(.*)
Location: /ngsi-ld/v1/csourceRegistrations/urn:R2



06. GET E1 on CB, with Accept == application/json, and Link header == XXX
=========================================================================
HTTP/1.1 200 OK
Content-Length: 165
Content-Type: application/json
Date: REGEX(.*)
Link: <https://fiware.github.io/NGSI-LD_TestSuite/ldContext/testContext.jsonld>; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"

{
    "P1": {
        "type": "Property",
        "value": "P1 in CP1"
    },
    "P2": {
        "type": "Property",
        "value": "P2 in CB"
    },
    "R1": {
        "object": "R1:in:CP2",
        "type": "Relationship"
    },
    "id": "urn:E1",
    "type": "T"
}


07. GET E1 on CB, with Accept == application/json, and no Link header - see longnames (except R1)
=================================================================================================
HTTP/1.1 200 OK
Content-Length: 222
Content-Type: application/json
Date: REGEX(.*)
Link: <https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld>; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"

{
    "R1": {
        "object": "R1:in:CP2",
        "type": "Relationship"
    },
    "http://example.org/P1": {
        "type": "Property",
        "value": "P1 in CP1"
    },
    "http://example.org/P2": {
        "type": "Property",
        "value": "P2 in CB"
    },
    "id": "urn:E1",
    "type": "http://example.org/T"
}


08. GET E1 on CB, with Accept == application/ld+json
====================================================
HTTP/1.1 200 OK
Content-Length: 295
Content-Type: application/ld+json
Date: REGEX(.*)

{
    "@context": "https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld",
    "R1": {
        "object": "R1:in:CP2",
        "type": "Relationship"
    },
    "http://example.org/P1": {
        "type": "Property",
        "value": "P1 in CP1"
    },
    "http://example.org/P2": {
        "type": "Property",
        "value": "P2 in CB"
    },
    "id": "urn:E1",
    "type": "http://example.org/T"
}


--TEARDOWN--
brokerStop CB
brokerStop CP1
brokerStop CP2
dbDrop CB
dbDrop CP1
dbDrop CP2
