# Copyright 2019 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Notifications - response of normalized format subscription (nested JSON problem)

--SHELL-INIT--
export BROKER=orionld
dbInit CB
brokerStart CB 0-255
accumulatorStart --pretty-print

--SHELL--

#
# 01. Create an Entity urn:ngsi-ld:Vehicle:A4501
# 02. Create a subscription matching the entity
# 03. Dump the accumulator to see the initial notification, then reset the accumulator
#

echo "01. Create an Entity urn:ngsi-ld:Vehicle:A4501"
echo "=============================================="
payload='{
  "id": "urn:ngsi-ld:Vehicle:A4501",
  "type": "Vehicle",
  "brandName": {
    "type": "Property",
    "value": "Mercedes"
  },
  "isParked": {
    "type": "Relationship",
    "object": "urn:ngsi-ld:OffStreetParking:Downtown1",
    "observedAt": "2018-12-04T12:00:00Z",
    "providedBy": {
      "type": "Relationship",
      "object": "urn:ngsi-ld:Person:Bob"
    }
  },
  "@context": [
    "http://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld"
  ]
}'
orionCurl --url /ngsi-ld/v1/entities --payload "$payload" -H "Content-Type: application/ld+json"
echo
echo


echo "02. Create a subscription matching the entity"
echo "============================================="
payload='{
  "id": "urn:ngsi-ld:Subscription:01",
  "type": "Subscription",
  "entities": [
    {
      "type": "Vehicle"
    }
  ],
  "@context": "http://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld",
  "description": "Notify me of all product vehicles changes",
  "notification": {
    "format": "normalized",
    "endpoint": {
      "uri": "http://localhost:'$LISTENER_PORT'/notify",
      "accept": "application/ld+json"
    }
  }
}'
orionCurl --url /ngsi-ld/v1/subscriptions --payload "$payload" -H "Content-Type: application/ld+json"
echo
echo


echo "03. Dump the accumulator to see the initial notification, then reset the accumulator"
echo "===================================================================================="
sleep 1
accumulatorDump
accumulatorReset
echo
echo


echo "04. See the entity in mongo"
echo "==========================="
mongoCmd2 ftest "db.entities.findOne()"
echo
echo


--REGEXPECT--
01. Create an Entity urn:ngsi-ld:Vehicle:A4501
==============================================
HTTP/1.1 201 Created
Content-Length: 0
Link: REGEX(.*)
Location: /ngsi-ld/v1/entities/urn:ngsi-ld:Vehicle:A4501
Date: REGEX(.*)



02. Create a subscription matching the entity
=============================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /ngsi-ld/v1/subscriptions/urn:ngsi-ld:Subscription:01
Date: REGEX(.*)



03. Dump the accumulator to see the initial notification, then reset the accumulator
====================================================================================
POST http://REGEX(.*)/notify
Fiware-Servicepath: /
Content-Length: 539
User-Agent: orion/REGEX(.*)
Ngsiv2-Attrsformat: normalized
Host: REGEX(.*)
Accept: application/json
Content-Type: application/ld+json

{
    "@context": "http://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld", 
    "data": [
        {
            "brandName": {
                "type": "Property", 
                "value": "Mercedes"
            }, 
            "id": "urn:ngsi-ld:Vehicle:A4501", 
            "isParked": {
                "object": "urn:ngsi-ld:OffStreetParking:Downtown1",
                "observedAt": "2018-12-04T12:00:00Z", 
                "providedBy": {
                    "object": "urn:ngsi-ld:Person:Bob",
                    "type": "Relationship"
                },
                "type": "Relationship"
            }, 
            "type": "Vehicle"
        }
    ], 
    "id": "urn:ngsi-ld:Notification:REGEX(.*)", 
    "notifiedAt": "REGEX(.*)", 
    "subscriptionId": "urn:ngsi-ld:Subscription:01", 
    "type": "Notification"
}
=======================================


04. See the entity in mongo
===========================
MongoDB shell version REGEX(.*)
connecting to: mongodb://REGEX(.*)
MongoDB server version: REGEX(.*)
{
	"_id" : {
		"id" : "urn:ngsi-ld:Vehicle:A4501",
		"type" : "https://uri.etsi.org/ngsi-ld/default-context/Vehicle",
		"servicePath" : "/"
	},
	"attrNames" : [
		"https://uri.etsi.org/ngsi-ld/default-context/brandName",
		"https://uri.etsi.org/ngsi-ld/default-context/isParked"
	],
	"attrs" : {
		"https://uri=etsi=org/ngsi-ld/default-context/brandName" : {
			"type" : "Property",
			"creDate" : REGEX(.*),
			"modDate" : REGEX(.*),
			"value" : "Mercedes",
			"mdNames" : [ ]
		},
		"https://uri=etsi=org/ngsi-ld/default-context/isParked" : {
			"type" : "Relationship",
			"creDate" : REGEX(.*),
			"modDate" : REGEX(.*),
			"value" : "urn:ngsi-ld:OffStreetParking:Downtown1",
			"md" : {
				"observedAt" : {
					"value" : 1543924800
				},
				"https://uri=etsi=org/ngsi-ld/default-context/providedBy" : {
					"type" : "Relationship",
					"value" : "urn:ngsi-ld:Person:Bob"
				}
			},
			"mdNames" : [
				"observedAt",
				"https://uri.etsi.org/ngsi-ld/default-context/providedBy"
			]
		}
	},
	"creDate" : REGEX(.*),
	"modDate" : REGEX(.*),
	"lastCorrelator" : ""
}
bye


--TEARDOWN--
brokerStop CB
dbDrop CB
