// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NgsildSample.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__NGSILDSAMPLE_HPP
#define FAST_DDS_GENERATED__NGSILDSAMPLE_HPP

#include <array>
#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(NGSILDSAMPLE_SOURCE)
#define NGSILDSAMPLE_DllAPI __declspec( dllexport )
#else
#define NGSILDSAMPLE_DllAPI __declspec( dllimport )
#endif // NGSILDSAMPLE_SOURCE
#else
#define NGSILDSAMPLE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define NGSILDSAMPLE_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure NgsildSample defined by the user in the IDL file.
 * @ingroup NgsildSample
 */
class NgsildSample
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport NgsildSample()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~NgsildSample()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object NgsildSample that will be copied.
     */
    eProsima_user_DllExport NgsildSample(
            const NgsildSample& x)
    {
                    m_s = x.m_s;

                    m_i = x.m_i;

                    m_f = x.m_f;

                    m_b = x.m_b;

                    m_ia = x.m_ia;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object NgsildSample that will be copied.
     */
    eProsima_user_DllExport NgsildSample(
            NgsildSample&& x) noexcept
    {
        m_s = std::move(x.m_s);
        m_i = x.m_i;
        m_f = x.m_f;
        m_b = x.m_b;
        m_ia = std::move(x.m_ia);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object NgsildSample that will be copied.
     */
    eProsima_user_DllExport NgsildSample& operator =(
            const NgsildSample& x)
    {

                    m_s = x.m_s;

                    m_i = x.m_i;

                    m_f = x.m_f;

                    m_b = x.m_b;

                    m_ia = x.m_ia;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object NgsildSample that will be copied.
     */
    eProsima_user_DllExport NgsildSample& operator =(
            NgsildSample&& x) noexcept
    {

        m_s = std::move(x.m_s);
        m_i = x.m_i;
        m_f = x.m_f;
        m_b = x.m_b;
        m_ia = std::move(x.m_ia);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x NgsildSample object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const NgsildSample& x) const
    {
        return (m_s == x.m_s &&
           m_i == x.m_i &&
           m_f == x.m_f &&
           m_b == x.m_b &&
           m_ia == x.m_ia);
    }

    /*!
     * @brief Comparison operator.
     * @param x NgsildSample object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const NgsildSample& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member s
     * @param _s New value to be copied in member s
     */
    eProsima_user_DllExport void s(
            const std::string& _s)
    {
        m_s = _s;
    }

    /*!
     * @brief This function moves the value in member s
     * @param _s New value to be moved in member s
     */
    eProsima_user_DllExport void s(
            std::string&& _s)
    {
        m_s = std::move(_s);
    }

    /*!
     * @brief This function returns a constant reference to member s
     * @return Constant reference to member s
     */
    eProsima_user_DllExport const std::string& s() const
    {
        return m_s;
    }

    /*!
     * @brief This function returns a reference to member s
     * @return Reference to member s
     */
    eProsima_user_DllExport std::string& s()
    {
        return m_s;
    }


    /*!
     * @brief This function sets a value in member i
     * @param _i New value for member i
     */
    eProsima_user_DllExport void i(
            int32_t _i)
    {
        m_i = _i;
    }

    /*!
     * @brief This function returns the value of member i
     * @return Value of member i
     */
    eProsima_user_DllExport int32_t i() const
    {
        return m_i;
    }

    /*!
     * @brief This function returns a reference to member i
     * @return Reference to member i
     */
    eProsima_user_DllExport int32_t& i()
    {
        return m_i;
    }


    /*!
     * @brief This function sets a value in member f
     * @param _f New value for member f
     */
    eProsima_user_DllExport void f(
            double _f)
    {
        m_f = _f;
    }

    /*!
     * @brief This function returns the value of member f
     * @return Value of member f
     */
    eProsima_user_DllExport double f() const
    {
        return m_f;
    }

    /*!
     * @brief This function returns a reference to member f
     * @return Reference to member f
     */
    eProsima_user_DllExport double& f()
    {
        return m_f;
    }


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            bool _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport bool b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport bool& b()
    {
        return m_b;
    }


    /*!
     * @brief This function copies the value in member ia
     * @param _ia New value to be copied in member ia
     */
    eProsima_user_DllExport void ia(
            const std::array<int32_t, 2>& _ia)
    {
        m_ia = _ia;
    }

    /*!
     * @brief This function moves the value in member ia
     * @param _ia New value to be moved in member ia
     */
    eProsima_user_DllExport void ia(
            std::array<int32_t, 2>&& _ia)
    {
        m_ia = std::move(_ia);
    }

    /*!
     * @brief This function returns a constant reference to member ia
     * @return Constant reference to member ia
     */
    eProsima_user_DllExport const std::array<int32_t, 2>& ia() const
    {
        return m_ia;
    }

    /*!
     * @brief This function returns a reference to member ia
     * @return Reference to member ia
     */
    eProsima_user_DllExport std::array<int32_t, 2>& ia()
    {
        return m_ia;
    }



private:

    std::string m_s;
    int32_t m_i{0};
    double m_f{0.0};
    bool m_b{false};
    std::array<int32_t, 2> m_ia{0};

};

#endif // _FAST_DDS_GENERATED_NGSILDSAMPLE_HPP_


