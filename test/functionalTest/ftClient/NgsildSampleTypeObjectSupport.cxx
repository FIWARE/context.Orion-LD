// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NgsildSampleTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "NgsildSampleTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "NgsildSample.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_NgsildSample_type_identifier(
        TypeIdentifierPair& type_ids_NgsildSample)
{

    ReturnCode_t return_code_NgsildSample {eprosima::fastdds::dds::RETCODE_OK};
    return_code_NgsildSample =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "NgsildSample", type_ids_NgsildSample);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_NgsildSample)
    {
        StructTypeFlag struct_flags_NgsildSample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_NgsildSample = "NgsildSample";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_NgsildSample;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_NgsildSample;
        CompleteTypeDetail detail_NgsildSample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_NgsildSample, ann_custom_NgsildSample, type_name_NgsildSample.to_string());
        CompleteStructHeader header_NgsildSample;
        header_NgsildSample = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_NgsildSample);
        CompleteStructMemberSeq member_seq_NgsildSample;
        {
            TypeIdentifierPair type_ids_s;
            ReturnCode_t return_code_s {eprosima::fastdds::dds::RETCODE_OK};
            return_code_s =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_s);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_s)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_s))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_s = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_s = 0x00000000;
            bool common_s_ec {false};
            CommonStructMember common_s {TypeObjectUtils::build_common_struct_member(member_id_s, member_flags_s, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_s, common_s_ec))};
            if (!common_s_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure s member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_s = "s";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_s;
            ann_custom_NgsildSample.reset();
            CompleteMemberDetail detail_s = TypeObjectUtils::build_complete_member_detail(name_s, member_ann_builtin_s, ann_custom_NgsildSample);
            CompleteStructMember member_s = TypeObjectUtils::build_complete_struct_member(common_s, detail_s);
            TypeObjectUtils::add_complete_struct_member(member_seq_NgsildSample, member_s);
        }
        {
            TypeIdentifierPair type_ids_i;
            ReturnCode_t return_code_i {eprosima::fastdds::dds::RETCODE_OK};
            return_code_i =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_i);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_i)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "i Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_i = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_i = 0x00000001;
            bool common_i_ec {false};
            CommonStructMember common_i {TypeObjectUtils::build_common_struct_member(member_id_i, member_flags_i, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_i, common_i_ec))};
            if (!common_i_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure i member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_i = "i";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_i;
            ann_custom_NgsildSample.reset();
            CompleteMemberDetail detail_i = TypeObjectUtils::build_complete_member_detail(name_i, member_ann_builtin_i, ann_custom_NgsildSample);
            CompleteStructMember member_i = TypeObjectUtils::build_complete_struct_member(common_i, detail_i);
            TypeObjectUtils::add_complete_struct_member(member_seq_NgsildSample, member_i);
        }
        {
            TypeIdentifierPair type_ids_f;
            ReturnCode_t return_code_f {eprosima::fastdds::dds::RETCODE_OK};
            return_code_f =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_f);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_f)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "f Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_f = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_f = 0x00000002;
            bool common_f_ec {false};
            CommonStructMember common_f {TypeObjectUtils::build_common_struct_member(member_id_f, member_flags_f, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_f, common_f_ec))};
            if (!common_f_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure f member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_f = "f";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_f;
            ann_custom_NgsildSample.reset();
            CompleteMemberDetail detail_f = TypeObjectUtils::build_complete_member_detail(name_f, member_ann_builtin_f, ann_custom_NgsildSample);
            CompleteStructMember member_f = TypeObjectUtils::build_complete_struct_member(common_f, detail_f);
            TypeObjectUtils::add_complete_struct_member(member_seq_NgsildSample, member_f);
        }
        {
            TypeIdentifierPair type_ids_b;
            ReturnCode_t return_code_b {eprosima::fastdds::dds::RETCODE_OK};
            return_code_b =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_b);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_b)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "b Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_b = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_b = 0x00000003;
            bool common_b_ec {false};
            CommonStructMember common_b {TypeObjectUtils::build_common_struct_member(member_id_b, member_flags_b, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_b, common_b_ec))};
            if (!common_b_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure b member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_b = "b";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
            ann_custom_NgsildSample.reset();
            CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_NgsildSample);
            CompleteStructMember member_b = TypeObjectUtils::build_complete_struct_member(common_b, detail_b);
            TypeObjectUtils::add_complete_struct_member(member_seq_NgsildSample, member_b);
        }
        {
            TypeIdentifierPair type_ids_ia;
            ReturnCode_t return_code_ia {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ia =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_int32_t_2", type_ids_ia);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ia)
            {
                return_code_ia =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_ia);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_ia)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_int32_t_2_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_int32_t_2 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ia, element_identifier_anonymous_array_int32_t_2_ec))};
                if (!element_identifier_anonymous_array_int32_t_2_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_int32_t_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_ia.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_int32_t_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_int32_t_2 = 0;
                PlainCollectionHeader header_anonymous_array_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_2, element_flags_anonymous_array_int32_t_2);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2", type_ids_ia))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_ia = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ia = 0x00000004;
            bool common_ia_ec {false};
            CommonStructMember common_ia {TypeObjectUtils::build_common_struct_member(member_id_ia, member_flags_ia, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ia, common_ia_ec))};
            if (!common_ia_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ia member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ia = "ia";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ia;
            ann_custom_NgsildSample.reset();
            CompleteMemberDetail detail_ia = TypeObjectUtils::build_complete_member_detail(name_ia, member_ann_builtin_ia, ann_custom_NgsildSample);
            CompleteStructMember member_ia = TypeObjectUtils::build_complete_struct_member(common_ia, detail_ia);
            TypeObjectUtils::add_complete_struct_member(member_seq_NgsildSample, member_ia);
        }
        CompleteStructType struct_type_NgsildSample = TypeObjectUtils::build_complete_struct_type(struct_flags_NgsildSample, header_NgsildSample, member_seq_NgsildSample);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_NgsildSample, type_name_NgsildSample.to_string(), type_ids_NgsildSample))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "NgsildSample already registered in TypeObjectRegistry for a different type.");
        }
    }
}

