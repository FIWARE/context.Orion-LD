#ifndef SRC_LIB_ORIONLD_DDS_NGSILDENTITY_H_
#define SRC_LIB_ORIONLD_DDS_NGSILDENTITY_H_

/*
*
* Copyright 2024 FIWARE Foundation e.V.
*
* This file is part of Orion-LD Context Broker.
*
* Orion-LD Context Broker is free software: you can redistribute it and/or
* modify it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
*
* Orion-LD Context Broker is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
* General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public License
* along with Orion-LD Context Broker. If not, see http://www.gnu.org/licenses/.
*
* For those usages not covered by this license please contact with
* orionld at fiware dot org
*
* Author: Ken Zangelin, David Campo, Luis Arturo Frigolet
*/

//
// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

/*!
 * @file NgsildEntity.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */
#include <cstdint>
#include <array>
#include <bitset>
#include <map>
#include <string>
#include <vector>

#include "fastcdr/cdr/fixed_size_string.hpp"
#include "fastcdr/xcdr/external.hpp"
#include "fastcdr/xcdr/optional.hpp"



// -----------------------------------------------------------------------------
//
// namespaces
//
namespace eprosima {
  namespace fastcdr {
    class Cdr;
    class CdrSizeCalculator;
  }  // namespace fastcdr
}  // namespace eprosima


#define eProsima_user_DllExport 


/*!
 * @brief This class represents the structure NgsildEntity defined by the user in the IDL file.
 * @ingroup NgsildEntity
 */
class NgsildEntity
{
 public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport NgsildEntity();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~NgsildEntity();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object NgsildEntity that will be copied.
   */
  eProsima_user_DllExport NgsildEntity(const NgsildEntity& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object NgsildEntity that will be copied.
   */
  eProsima_user_DllExport NgsildEntity(NgsildEntity&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object NgsildEntity that will be copied.
   */
  eProsima_user_DllExport NgsildEntity& operator =(const NgsildEntity& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object NgsildEntity that will be copied.
   */
  eProsima_user_DllExport NgsildEntity& operator =(NgsildEntity&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x NgsildEntity object to compare.
   */
  eProsima_user_DllExport bool operator ==(const NgsildEntity& x) const;

  /*!
   * @brief Comparison operator.
   * @param x NgsildEntity object to compare.
   */
  eProsima_user_DllExport bool operator !=(const NgsildEntity& x) const;

  /*!
   * @brief This function copies the value in member id
   * @param _id New value to be copied in member id
   */
  eProsima_user_DllExport void id(const std::string& _id);

  /*!
   * @brief This function moves the value in member id
   * @param _id New value to be moved in member id
   */
  eProsima_user_DllExport void id(std::string&& _id);

  /*!
   * @brief This function returns a constant reference to member id
   * @return Constant reference to member id
   */
  eProsima_user_DllExport const std::string& id() const;

  /*!
   * @brief This function returns a reference to member id
   * @return Reference to member id
   */
  eProsima_user_DllExport std::string& id();


  /*!
   * @brief This function copies the value in member type
   * @param _type New value to be copied in member type
   */
  eProsima_user_DllExport void type(const std::string& _type);

  /*!
   * @brief This function moves the value in member type
   * @param _type New value to be moved in member type
   */
  eProsima_user_DllExport void type(std::string&& _type);

  /*!
   * @brief This function returns a constant reference to member type
   * @return Constant reference to member type
   */
  eProsima_user_DllExport const std::string& type() const;

  /*!
   * @brief This function returns a reference to member type
   * @return Reference to member type
   */
  eProsima_user_DllExport std::string& type();

 private:
  std::string m_id;
  std::string m_type;
};

#endif  // SRC_LIB_ORIONLD_DDS_NGSILDENTITY_H_
