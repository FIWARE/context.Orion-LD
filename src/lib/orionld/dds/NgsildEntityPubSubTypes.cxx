//
// Copyright 2024 FIWARE Foundation e.V.
//
// This file is part of Orion-LD Context Broker.
//
// Orion-LD Context Broker is free software: you can redistribute it and/or
// modify it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// Orion-LD Context Broker is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
// General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Orion-LD Context Broker. If not, see http://www.gnu.org/licenses/.
//
// For those usages not covered by this license please contact with
// orionld at fiware dot org
//

// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NgsildEntityPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastddsgen.
 */


#include <fastdds/rtps/common/CdrSerialization.hpp>

#include "NgsildEntityPubSubTypes.h"
#include "NgsildEntityCdrAux.hpp"

using SerializedPayload_t    = eprosima::fastrtps::rtps::SerializedPayload_t;
using InstanceHandle_t       = eprosima::fastrtps::rtps::InstanceHandle_t;
using DataRepresentationId_t = eprosima::fastdds::dds::DataRepresentationId_t;



// -----------------------------------------------------------------------------
//
// NgsildEntityPubSubType::NgsildEntityPubSubType
//
NgsildEntityPubSubType::NgsildEntityPubSubType(const char* topicType)
{
  setName(topicType);
  uint32_t type_size =
#if FASTCDR_VERSION_MAJOR == 1
    static_cast<uint32_t>(NgsildEntity::getMaxCdrSerializedSize());
#else
    NgsildEntity_max_cdr_typesize;
#endif

  type_size += static_cast<uint32_t>(eprosima::fastcdr::Cdr::alignment(type_size, 4)); /* possible submessage alignment */
  m_typeSize = type_size + 4; /*encapsulation*/
  m_isGetKeyDefined = false;
  uint32_t keyLength = NgsildEntity_max_key_cdr_typesize > 16 ? NgsildEntity_max_key_cdr_typesize : 16;
  m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
  memset(m_keyBuffer, 0, keyLength);
}



// -----------------------------------------------------------------------------
//
// NgsildEntityPubSubType::~NgsildEntityPubSubType
//
NgsildEntityPubSubType::~NgsildEntityPubSubType()
{
  if (m_keyBuffer != nullptr)
  {
    free(m_keyBuffer);
    m_keyBuffer = nullptr;
  }
}



// -----------------------------------------------------------------------------
//
// NgsildEntityPubSubType::~NgsildEntityPubSubType
//
bool NgsildEntityPubSubType::serialize
(
  void*                   data,
  SerializedPayload_t*    payload,
  DataRepresentationId_t  data_representation
)
{
  NgsildEntity* p_type = static_cast<NgsildEntity*>(data);

  // Object that manages the raw buffer.
  eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);
  // Object that serializes the data.
  eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                             data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?
                             eprosima::fastcdr::CdrVersion::XCDRv1 : eprosima::fastcdr::CdrVersion::XCDRv2);
  payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
#if FASTCDR_VERSION_MAJOR > 1
  ser.set_encoding_flag(
    data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?
    eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR  :
    eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2);
#endif // FASTCDR_VERSION_MAJOR > 1

  try
  {
    // Serialize encapsulation
    ser.serialize_encapsulation();
    // Serialize the object.
    ser << *p_type;
  }
  catch (eprosima::fastcdr::exception::Exception& /*exception*/)
  {
    return false;
  }

  // Get the serialized length
#if FASTCDR_VERSION_MAJOR == 1
  payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());
#else
  payload->length = static_cast<uint32_t>(ser.get_serialized_data_length());
#endif // FASTCDR_VERSION_MAJOR == 1

  return true;
}

bool NgsildEntityPubSubType::deserialize
(
  SerializedPayload_t* payload,
  void*                data
)
{
  try
  {
    // Convert DATA to pointer of your type
    NgsildEntity* p_type = static_cast<NgsildEntity*>(data);

    // Object that manages the raw buffer.
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);

    // Object that deserializes the data.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN
#if FASTCDR_VERSION_MAJOR == 1
                                 , eprosima::fastcdr::Cdr::CdrType::DDS_CDR
#endif // FASTCDR_VERSION_MAJOR == 1
      );

    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    // Deserialize the object.
    deser >> *p_type;
  }
  catch (eprosima::fastcdr::exception::Exception& /*exception*/)
  {
    return false;
  }

  return true;
}



std::function<uint32_t()> NgsildEntityPubSubType::getSerializedSizeProvider
(
  void*                   data,
  DataRepresentationId_t  data_representation
)
{
  return [data, data_representation]() -> uint32_t
  {
#if FASTCDR_VERSION_MAJOR == 1
    static_cast<void>(data_representation);
    return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<NgsildEntity*>(data))) +
    4u /*encapsulation*/;
#else
    try
    {
      eprosima::fastcdr::CdrSizeCalculator calculator(
        data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?
        eprosima::fastcdr::CdrVersion::XCDRv1 :eprosima::fastcdr::CdrVersion::XCDRv2);
      size_t current_alignment {0};
      return static_cast<uint32_t>(calculator.calculate_serialized_size(
                                       *static_cast<NgsildEntity*>(data), current_alignment)) +
        4u /*encapsulation*/;
    }
    catch (eprosima::fastcdr::exception::Exception& /*exception*/)
    {
      return 0;
    }
#endif // FASTCDR_VERSION_MAJOR == 1
  };
}



void* NgsildEntityPubSubType::createData()
{
  return reinterpret_cast<void*>(new NgsildEntity());
}

void NgsildEntityPubSubType::deleteData(void* data)
{
  delete(reinterpret_cast<NgsildEntity*>(data));
}

bool NgsildEntityPubSubType::getKey
(
  void*              data,
  InstanceHandle_t*  handle,
  bool               force_md5
)
{
  if (!m_isGetKeyDefined)
  {
    return false;
  }

  NgsildEntity* p_type = static_cast<NgsildEntity*>(data);

  // Object that manages the raw buffer.
  eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer), NgsildEntity_max_key_cdr_typesize);

  // Object that serializes the data.
  eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS, eprosima::fastcdr::CdrVersion::XCDRv1);
#if FASTCDR_VERSION_MAJOR == 1
  p_type->serializeKey(ser);
#else
  eprosima::fastcdr::serialize_key(ser, *p_type);
#endif // FASTCDR_VERSION_MAJOR == 1
  if (force_md5 || NgsildEntity_max_key_cdr_typesize > 16)
  {
    m_md5.init();
#if FASTCDR_VERSION_MAJOR == 1
    m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
#else
    m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.get_serialized_data_length()));
#endif // FASTCDR_VERSION_MAJOR == 1
    m_md5.finalize();
    for (uint8_t i = 0; i < 16; ++i)
    {
      handle->value[i] = m_md5.digest[i];
    }
  }
  else
  {
    for (uint8_t i = 0; i < 16; ++i)
    {
      handle->value[i] = m_keyBuffer[i];
    }
  }

  return true;
}
