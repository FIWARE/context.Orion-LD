// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NgsildEntity.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "NgsildEntity.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




NgsildEntity::NgsildEntity()
{
  m_createdAt  = 0;
  m_modifiedAt = 0;
}

NgsildEntity::~NgsildEntity()
{
}

NgsildEntity::NgsildEntity(
        const NgsildEntity& x)
{
    m_id = x.m_id;
    m_type = x.m_type;
    m_scope = x.m_scope;
    m_createdAt = x.m_createdAt;
    m_modifiedAt = x.m_modifiedAt;
    m_tenant = x.m_tenant;
    m_attributes = x.m_attributes;
}

NgsildEntity::NgsildEntity(
        NgsildEntity&& x) noexcept
{
    m_id = std::move(x.m_id);
    m_type = std::move(x.m_type);
    m_scope = std::move(x.m_scope);
    m_createdAt = x.m_createdAt;
    m_modifiedAt = x.m_modifiedAt;
    m_tenant = std::move(x.m_tenant);
    m_attributes = std::move(x.m_attributes);
}

NgsildEntity& NgsildEntity::operator =(
        const NgsildEntity& x)
{

    m_id = x.m_id;
    m_type = x.m_type;
    m_scope = x.m_scope;
    m_createdAt = x.m_createdAt;
    m_modifiedAt = x.m_modifiedAt;
    m_tenant = x.m_tenant;
    m_attributes = x.m_attributes;
    return *this;
}

NgsildEntity& NgsildEntity::operator =(
        NgsildEntity&& x) noexcept
{

    m_id = std::move(x.m_id);
    m_type = std::move(x.m_type);
    m_scope = std::move(x.m_scope);
    m_createdAt = x.m_createdAt;
    m_modifiedAt = x.m_modifiedAt;
    m_tenant = std::move(x.m_tenant);
    m_attributes = std::move(x.m_attributes);
    return *this;
}

bool NgsildEntity::operator ==(
        const NgsildEntity& x) const
{
    return (m_id == x.m_id &&
           m_type == x.m_type &&
           m_scope == x.m_scope &&
           m_createdAt == x.m_createdAt &&
           m_modifiedAt == x.m_modifiedAt &&
           m_tenant == x.m_tenant &&
           m_attributes == x.m_attributes);
}

bool NgsildEntity::operator !=(
        const NgsildEntity& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void NgsildEntity::id(
        const std::string& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void NgsildEntity::id(
        std::string&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const std::string& NgsildEntity::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
std::string& NgsildEntity::id()
{
    return m_id;
}


/*!
 * @brief This function copies the value in member type
 * @param _type New value to be copied in member type
 */
void NgsildEntity::type(
        const std::string& _type)
{
    m_type = _type;
}

/*!
 * @brief This function moves the value in member type
 * @param _type New value to be moved in member type
 */
void NgsildEntity::type(
        std::string&& _type)
{
    m_type = std::move(_type);
}

/*!
 * @brief This function returns a constant reference to member type
 * @return Constant reference to member type
 */
const std::string& NgsildEntity::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
std::string& NgsildEntity::type()
{
    return m_type;
}


/*!
 * @brief This function copies the value in member scope
 * @param _scope New value to be copied in member scope
 */
void NgsildEntity::scope(
        const std::string& _scope)
{
    m_scope = _scope;
}

/*!
 * @brief This function moves the value in member scope
 * @param _scope New value to be moved in member scope
 */
void NgsildEntity::scope(
        std::string&& _scope)
{
    m_scope = std::move(_scope);
}

/*!
 * @brief This function returns a constant reference to member scope
 * @return Constant reference to member scope
 */
const std::string& NgsildEntity::scope() const
{
    return m_scope;
}

/*!
 * @brief This function returns a reference to member scope
 * @return Reference to member scope
 */
std::string& NgsildEntity::scope()
{
    return m_scope;
}


/*!
 * @brief This function sets a value in member createdAt
 * @param _createdAt New value for member createdAt
 */
void NgsildEntity::createdAt(
        uint64_t _createdAt)
{
    m_createdAt = _createdAt;
}

/*!
 * @brief This function returns the value of member createdAt
 * @return Value of member createdAt
 */
uint64_t NgsildEntity::createdAt() const
{
    return m_createdAt;
}

/*!
 * @brief This function returns a reference to member createdAt
 * @return Reference to member createdAt
 */
uint64_t& NgsildEntity::createdAt()
{
    return m_createdAt;
}


/*!
 * @brief This function sets a value in member modifiedAt
 * @param _modifiedAt New value for member modifiedAt
 */
void NgsildEntity::modifiedAt(
        uint64_t _modifiedAt)
{
    m_modifiedAt = _modifiedAt;
}

/*!
 * @brief This function returns the value of member modifiedAt
 * @return Value of member modifiedAt
 */
uint64_t NgsildEntity::modifiedAt() const
{
    return m_modifiedAt;
}

/*!
 * @brief This function returns a reference to member modifiedAt
 * @return Reference to member modifiedAt
 */
uint64_t& NgsildEntity::modifiedAt()
{
    return m_modifiedAt;
}


/*!
 * @brief This function copies the value in member tenant
 * @param _tenant New value to be copied in member tenant
 */
void NgsildEntity::tenant(
        const std::string& _tenant)
{
    m_tenant = _tenant;
}

/*!
 * @brief This function moves the value in member tenant
 * @param _tenant New value to be moved in member tenant
 */
void NgsildEntity::tenant(
        std::string&& _tenant)
{
    m_tenant = std::move(_tenant);
}

/*!
 * @brief This function returns a constant reference to member tenant
 * @return Constant reference to member tenant
 */
const std::string& NgsildEntity::tenant() const
{
    return m_tenant;
}

/*!
 * @brief This function returns a reference to member tenant
 * @return Reference to member tenant
 */
std::string& NgsildEntity::tenant()
{
    return m_tenant;
}


/*!
 * @brief This function copies the value in member attributes
 * @param _attributes New value to be copied in member attributes
 */
void NgsildEntity::attributes(
        const std::string& _attributes)
{
    m_attributes = _attributes;
}

/*!
 * @brief This function moves the value in member attributes
 * @param _attributes New value to be moved in member attributes
 */
void NgsildEntity::attributes(
        std::string&& _attributes)
{
    m_attributes = std::move(_attributes);
}

/*!
 * @brief This function returns a constant reference to member attributes
 * @return Constant reference to member attributes
 */
const std::string& NgsildEntity::attributes() const
{
    return m_attributes;
}

/*!
 * @brief This function returns a reference to member attributes
 * @return Reference to member attributes
 */
std::string& NgsildEntity::attributes()
{
    return m_attributes;
}


// Include auxiliary functions like for serializing/deserializing.
#include "NgsildEntityCdrAux.ipp"

